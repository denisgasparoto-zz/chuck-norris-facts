apply(plugin: "jacoco")

jacoco {
    toolVersion = '0.8.5'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoUnitTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            'build/**',
            'android/**/*.*',
            '**/*Test*.*',
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            '**/BuildConfig.*',
            '**/*Application*.*',
            '**/*Generated.java',
            '**/src/main/res/**',
            '**/AndroidManifest.xml',

            '**/*Router*',
            '**/*Adapter*',
            '**/*Activity*',
            '**/*Contract*',
            '**/*ViewHolder*',
            '**/core/di/*',
            '**/core/base/*',
            '**/core/network/*',
            '**/domain/model/*',
            '**/core/extensions/*'
    ]

    def mainSrc = "${project.projectDir}/src/main/java"
    def javaDebugTree = fileTree(dir: "$buildDir/intermediates/classes/debug", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)

    classDirectories.setFrom(files([javaDebugTree], [kotlinDebugTree]))
    executionData.setFrom(files("$buildDir/jacoco/testDebugUnitTest.exec"))
    sourceDirectories.setFrom(files([mainSrc]))
}
